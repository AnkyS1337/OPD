<?php

namespace app\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use yii\data\ArrayDataProvider;
use app\models\States_for_waybill;

/**
 * States_for_waybillSearch represents the model behind the search form of `app\models\States_for_waybill`.
 */
class States_for_waybillSearch extends States_for_waybill
{
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'id_waybill', 'id_shop', 'id_product', 'count', 'NPP', 'type_of_payment'], 'integer'],
            [['price_for_one','returns'], 'number'],
            [['name_shop', 'address'], 'safe'],
        ];
    }

    public static function tableName()
    {
        return 'states_for_waybill'; // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = States_for_waybill::find()->where(['deleted'=>0]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query->orderBy(['NPP'=> SORT_ASC]),
		'pagination' => false,
        ]); 


        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'id_waybill' => $this->id_waybill,
            'id_shop' => $this->id_shop,
            'id_product' => $this->id_product,
            'price_for_one' => $this->price_for_one,
            'count' => $this->count,
            'NPP' => $this->NPP,
            'type_of_payment' => $this->type_of_payment,
            'returns'=>$this->returns,
        ]);

        $query->andFilterWhere(['like', 'name_shop', $this->name_shop])
            ->andFilterWhere(['like', 'address', $this->address]);

        return $dataProvider;
    }
}
